<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --border-color: #e0e0e0;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --primary-blue: #007bff;
            --success-green: #28a745;
        }

        body {
            margin: 0;
            padding: 0;
            background: #f8f9fa;
        }

        .map-container {
            display: flex;
            height: calc(100vh - 76px);
            margin-top: 76px;
            gap: 20px;
            padding: 20px;
            background: #ffffff;
        }
        
        .job-list {
            width: 40%;
            overflow-y: auto;
            background: #ffffff;
            border-radius: 12px;
            border: 1px solid var(--border-color);
            box-shadow: 0 4px 6px var(--shadow-color);
        }
        
        .job-list-header {
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
            background: #ffffff;
            border-radius: 12px 12px 0 0;
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .job-list-content {
            padding: 20px;
        }
        
        .map-section {
            width: 60%;
            border-radius: 12px;
            overflow: hidden;
            border: 1px solid var(--border-color);
            box-shadow: 0 4px 6px var(--shadow-color);
        }
        
        #map {
            width: 100%;
            height: 100%;
        }
        
        .job-card {
            background: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
            border: 1px solid var(--border-color);
            box-shadow: 0 2px 4px var(--shadow-color);
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .job-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .job-card.active {
            border-left: 4px solid var(--primary-blue);
        }

        .job-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
        }

        .job-location {
            color: #666;
            font-size: 0.9rem;
            margin-bottom: 8px;
        }

        .job-salary {
            color: var(--success-green);
            font-weight: 500;
            margin-bottom: 8px;
        }

        .job-description {
            color: #555;
            font-size: 0.9rem;
            margin-bottom: 10px;
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }

        .error-message {
            color: #dc3545;
            padding: 10px;
            text-align: center;
            background: #f8d7da;
            border-radius: 4px;
            margin: 10px 0;
        }

        .btn-primary {
            background-color: var(--primary-blue);
            border-color: var(--primary-blue);
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body>
    <div class="map-container">
        <div class="job-list">
            <div class="job-list-header">
                <h4 class="mb-0">Available Positions</h4>
            </div>
            <div class="job-list-content" id="jobList">
                <div class="loading">Loading jobs...</div>
            </div>
        </div>
        <div class="map-section">
            <div id="map"></div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        // Initialize map
        const map = L.map('map').setView([20.5937, 78.9629], 5); // Center of India
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Â© OpenStreetMap contributors'
        }).addTo(map);

        let markers = {};
        let currentActiveJob = null;

        function createJobCard(job, isActive = false) {
            return `
                <div class="job-card ${isActive ? 'active' : ''}" 
                     id="job-${job.id}" 
                     onclick="handleJobCardClick(${job.id})">
                    <div class="job-title">${job.title}</div>
                    <div class="job-location">
                        <i class="fas fa-map-marker-alt"></i> ${job.location}
                    </div>
                    <div class="job-salary">${job.salary_range}</div>
                    <div class="job-description">${job.description.substring(0, 150)}...</div>
                    <div class="mt-2">
                        <small class="text-muted">Posted by: ${job.poster_name}</small>
                    </div>
                    <button class="btn btn-primary btn-sm mt-2" 
                            onclick="window.location.href='/jobs/${job.id}'">
                        View Details
                    </button>
                </div>
            `;
        }

        function displayJobs(jobs) {
            const jobList = document.getElementById('jobList');
            if (!jobs.length) {
                jobList.innerHTML = '<div class="error-message">No jobs available at the moment.</div>';
                return;
            }

            jobList.innerHTML = jobs.map(job => createJobCard(job)).join('');
            
            // Clear existing markers
            Object.values(markers).forEach(marker => map.removeLayer(marker));
            markers = {};

            // Add markers for each job
            jobs.forEach(job => {
                if (job.latitude && job.longitude) {
                    const marker = L.marker([job.latitude, job.longitude])
                        .addTo(map)
                        .bindPopup(`
                            <strong>${job.title}</strong><br>
                            ${job.location}<br>
                            ${job.salary_range}
                        `);

                    markers[job.id] = marker;

                    marker.on('click', () => {
                        handleMarkerClick(job.id);
                    });
                }
            });

            // Fit map bounds to show all markers
            if (Object.keys(markers).length > 0) {
                const group = new L.featureGroup(Object.values(markers));
                map.fitBounds(group.getBounds(), { padding: [50, 50] });
            }
        }

        function handleJobCardClick(jobId) {
            if (currentActiveJob === jobId) return;
            
            // Remove active class from previous job card
            if (currentActiveJob) {
                const prevCard = document.getElementById(`job-${currentActiveJob}`);
                if (prevCard) prevCard.classList.remove('active');
            }

            // Add active class to new job card
            const newCard = document.getElementById(`job-${jobId}`);
            if (newCard) {
                newCard.classList.add('active');
                newCard.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }

            // Open popup for corresponding marker
            const marker = markers[jobId];
            if (marker) {
                map.setView(marker.getLatLng(), 13);
                marker.openPopup();
            }

            currentActiveJob = jobId;
        }

        function handleMarkerClick(jobId) {
            handleJobCardClick(jobId);
        }

        async function loadJobs() {
            try {
                const response = await fetch('/api/map-jobs');
                if (!response.ok) throw new Error('Failed to fetch jobs');
                
                const jobs = await response.json();
                displayJobs(jobs);
            } catch (err) {
                console.error('Error loading jobs:', err);
                document.getElementById('jobList').innerHTML = `
                    <div class="error-message">
                        Failed to load jobs. Please try again later.
                    </div>
                `;
            }
        }

        // Load initial jobs
        loadJobs();

        // Refresh jobs every minute
        setInterval(loadJobs, 60000);
    </script>
</body>
</html>